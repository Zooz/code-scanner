- id: "flawfinder.cuserid-1"
  languages:
  - "c"
  message: |
    Use getpwuid(geteuid()) and extract the desired information instead.
  metadata:
    cwe: "CWE-120: Exactly what cuserid() does is poorly defined (e.g., some systems
      use the effective uid, like Linux, while others like System V use the real uid).
      Thus, you can't trust what it does. It's certainly not portable (The cuserid
      function was included in the 1988 version of POSIX, but removed from the 1990
      version).  Also, if passed a non-null parameter, there's a risk of a buffer
      overflow if the passed-in buffer is not at least L_cuserid characters long (CWE-120)"
  pattern: "cuserid(...)"
  severity: "ERROR"
- id: "flawfinder.fopen-1.open-1"
  languages:
  - "c"
  message: |
    Check when opening files - can an attacker redirect it (via symlinks).
  metadata:
    cwe: "CWE-362: Check when opening files - can an attacker redirect it (via symlinks),
      force the opening of special file type (e.g., device files), move things around
      to create a race condition, control its ancestors, or change its contents? (CWE-362)"
  pattern-either:
  - pattern: "fopen(...)"
  - pattern: "open(...)"
  severity: "INFO"
- id: "flawfinder.getlogin-1"
  languages:
  - "c"
  message: |
    Use getpwuid(geteuid()) and extract the desired information instead.
  metadata:
    cwe: "CWE-807: It's often easy to fool getlogin.  Sometimes it does not work at
      all, because some program messed up the utmp file.  Often, it gives only the
      first 8 characters of the login name. The user currently logged in on the controlling
      tty of our program need not be the user who started it.  Avoid getlogin() for
      security-related purposes (CWE-807)"
  pattern: "getlogin(...)"
  severity: "ERROR"
- id: "flawfinder.getpass-1"
  languages:
  - "c"
  message: |
    Make the specific calls to do exactly what you want.  If you continue to use it, or write your
    own, be sure to zero the password as soon as possible to avoid leaving the cleartext password
    visible in the process' address space.
  metadata:
    cwe: "CWE-20: This function is obsolete and not portable. It was in SUSv2 but
      removed by POSIX.2.  What it does exactly varies considerably between systems,
      particularly in where its prompt is displayed and where it gets its data (e.g.,
      /dev/tty, stdin, stderr, etc.). In addition, some implementations overflow buffers.
      (CWE-676, CWE-120, CWE-20)"
  pattern: "getpass(...)"
  severity: "ERROR"
- id: "flawfinder.gsignal-1.ssignal-1"
  languages:
  - "c"
  message: |
    Switch to raise/signal, or some other signalling approach.
  metadata:
    cwe: "CWE-676: These functions are considered obsolete on most systems, and very
      non-portable (Linux-based systems handle them radically different, basically
      if gsignal/ssignal were the same as raise/signal respectively, while System
      V considers them a separate set and obsolete) (CWE-676)"
  pattern-either:
  - pattern: "gsignal(...)"
  - pattern: "ssignal(...)"
  severity: "INFO"
- id: "flawfinder.ulimit-1"
  languages:
  - "c"
  message: |
    Use getrlimit(2), setrlimit(2), and sysconf(3) instead.
  metadata:
    cwe: "CWE-676: This C routine is considered obsolete (as opposed to the shell
      command by the same name, which is NOT obsolete) (CWE-676)"
  pattern: "ulimit(...)"
  severity: "INFO"
- id: "flawfinder.usleep-1"
  languages:
  - "c"
  message: |
    Use nanosleep(2) or setitimer(2) instead.
  metadata:
    cwe: "CWE-676: This C routine is considered obsolete (as opposed to the shell
      command by the same name).   The interaction of this function with SIGALRM and
      other timer functions such as sleep(), alarm(), setitimer(), and nanosleep()
      is unspecified (CWE-676)"
  pattern: "usleep(...)"
  severity: "INFO"
- id: "flawfinder.access-1"
  languages:
  - "c"
  message: |
    Set up the correct permissions (e.g., using setuid()) and try to open the file directly.
  metadata:
    cwe: "CWE-362: This usually indicates a security flaw.  If an attacker can change
      anything along the path between the call to access() and the file's actual use
      (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!)"
  pattern: "access(...)"
  severity: "ERROR"
- id: "flawfinder.chgrp-1"
  languages:
  - "c"
  message: |
    Use fchgrp( ) instead.
  metadata:
    cwe: "CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)"
  pattern: "chgrp(...)"
  severity: "ERROR"
- id: "flawfinder.chmod-1"
  languages:
  - "c"
  message: |
    Use fchmod( ) instead.
  metadata:
    cwe: "CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)"
  pattern: "chmod(...)"
  severity: "ERROR"
- id: "flawfinder.chown-1"
  languages:
  - "c"
  message: |
    Use fchown( ) instead.
  metadata:
    cwe: "CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)"
  pattern: "chown(...)"
  severity: "ERROR"
- id: "flawfinder.readlink-1"
  languages:
  - "c"
  message: |
    Reconsider approach.
  metadata:
    cwe: "CWE-20: This accepts filename arguments; if an attacker can move those files
      or change the link content, a race condition results.  Also, it does not terminate
      with ASCII NUL. (CWE-362, CWE-20)"
  pattern: "readlink(...)"
  severity: "ERROR"
- id: "flawfinder.vfork-1"
  languages:
  - "c"
  message: |
    Use fork() instead.
  metadata:
    cwe: "CWE-362: On some old systems, vfork() permits race conditions, and it's
      very difficult to use correctly (CWE-362)"
  pattern: "vfork(...)"
  severity: "INFO"
- id: "flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1"
  languages:
  - "c"
  message: |
    Use a more secure technique for acquiring random values.
  metadata:
    cwe: "CWE-327: This function is not sufficiently random for security-related functions
      such as key and nonce creation (CWE-327)"
  pattern-either:
  - pattern: "drand48(...)"
  - pattern: "erand48(...)"
  - pattern: "jrand48(...)"
  - pattern: "lcong48(...)"
  - pattern: "lrand48(...)"
  - pattern: "mrand48(...)"
  - pattern: "nrand48(...)"
  - pattern: "random(...)"
  - pattern: "seed48(...)"
  - pattern: "setstate(...)"
  - pattern: "srand(...)"
  - pattern: "strfry(...)"
  - pattern: "srandom(...)"
  - pattern: "g_rand_boolean(...)"
  - pattern: "g_rand_int(...)"
  - pattern: "g_rand_int_range(...)"
  - pattern: "g_rand_double(...)"
  - pattern: "g_rand_double_range(...)"
  - pattern: "g_random_boolean(...)"
  - pattern: "g_random_int(...)"
  - pattern: "g_random_int_range(...)"
  - pattern: "g_random_double(...)"
  - pattern: "g_random_double_range(...)"
  - pattern-regex: "(long|short|double|int|float|void)\\s(\\*|)(\\s|)(seed48|lcong48)(\\(.*\\))\\;"
  severity: "WARNING"
- id: "flawfinder.CreateProcess-1"
  languages:
  - "c"
  message: |
    Specify the application path in the first argument, NOT as part of the second, or embedded
    spaces could allow an attacker to force a different program to run.
  metadata:
    cwe: "CWE-78: This causes a new process to execute and is difficult to use safely
      (CWE-78)"
  pattern: "CreateProcess(...)"
  severity: "WARNING"
- id: "flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1"
  languages:
  - "c"
  message: |
    Especially watch out for embedded spaces.
  metadata:
    cwe: "CWE-78: This causes a new process to execute and is difficult to use safely
      (CWE-78)"
  pattern-either:
  - pattern: "CreateProcessAsUser(...)"
  - pattern: "CreateProcessWithLogon(...)"
  severity: "WARNING"
- id: "flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1"
  languages:
  - "c"
  message: |
    try using a library call that implements the same functionality if available.
  metadata:
    cwe: "CWE-78: This causes a new program to execute and is difficult to use safely
      (CWE-78)"
  pattern-either:
  - pattern: "execl(...)"
  - pattern: "execlp(...)"
  - pattern: "execle(...)"
  - pattern: "execv(...)"
  - pattern: "execvp(...)"
  - pattern: "popen(...)"
  - pattern: "WinExec(...)"
  - pattern: "ShellExecute(...)"
  severity: "ERROR"
- id: "flawfinder.system-1"
  languages:
  - "c"
  message: |
    try using a library call that implements the same functionality if available.
  metadata:
    cwe: "CWE-78: This causes a new program to execute and is difficult to use safely
      (CWE-78)"
  pattern: "system(...)"
  severity: "ERROR"
- id: "flawfinder.GetTempFileName-1"
  languages:
  - "c"
  message: |
    Temporary file race condition in certain cases.
  metadata:
    cwe: "CWE-377: Temporary file race condition in certain cases (e.g., if run as
      SYSTEM in many versions of Windows) (CWE-377)"
  pattern: "GetTempFileName(...)"
  severity: "WARNING"
- id: "flawfinder.mkstemp-1"
  languages:
  - "c"
  message: |
    Some older Unix-like systems create temp files with permission to write by
    all by default, so be sure to set the umask to override this. Also, some older
    Unix systems might fail to use O_EXCL when opening the file, so make sure that
    O_EXCL is used by the library.
  metadata:
    cwe: "CWE-377: Potential for temporary file vulnerability in some circumstances."
  pattern: "mkstemp(...)"
  severity: "INFO"
- id: "flawfinder.mktemp-1"
  languages:
  - "c"
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack (CWE-377).
  metadata:
    cwe: "CWE-377: Temporary file race condition (CWE-377)"
  pattern: "mktemp(...)"
  severity: "ERROR"
- id: "flawfinder.tmpfile-1"
  languages:
  - "c"
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack
  metadata:
    cwe: "CWE-377: Function tmpfile() has a security flaw on some systems (e.g., older
      System V systems) (CWE-377)"
  pattern: "tmpfile(...)"
  severity: "INFO"
- id: "flawfinder.tmpnam-1.tempnam-1"
  languages:
  - "c"
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack.
  metadata:
    cwe: "CWE-377: Temporary file race condition (CWE-377)"
  pattern-either:
  - pattern: "tmpnam(...)"
  - pattern: "tempnam(...)"
  severity: "WARNING"
